{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1_KFduNBhMmxyvUVO6iSWrQSA1bOQSwzI","timestamp":1699806071859}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"FWh2UQjTa4Th","executionInfo":{"status":"ok","timestamp":1699869299049,"user_tz":-180,"elapsed":77563,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}}},"outputs":[],"source":["%%capture\n","!pip install imbalanced-learn fastFM\n","!gdown 1gOomlws4CtDq4-mlovq9Rjs7s3hV7oJ3\n","!gdown 1nFoyCTrEOH6r8kWc6QVUDlqTqdNfZKR9\n","!gdown 1RKk2LF0ZzWEeKlje7zPXD4aXH0A00iNG"]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler, LabelEncoder\n","from sklearn.feature_extraction.text import HashingVectorizer\n","\n","import time\n","import pandas as pd\n","import torch\n","import numpy as np\n","from imblearn.under_sampling import TomekLinks\n","from sklearn.metrics import accuracy_score, f1_score\n","from sklearn.pipeline import make_pipeline\n","from fastFM import sgd"],"metadata":{"id":"7BBVqNXAbBES","executionInfo":{"status":"ok","timestamp":1699869342791,"user_tz":-180,"elapsed":6,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["torch.cuda.device(0)\n","torch.cuda.get_device_name(0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"QkT0pF1Ocd2M","executionInfo":{"status":"ok","timestamp":1699864890681,"user_tz":-180,"elapsed":15,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}},"outputId":"df4deb0c-2847-4b10-dbe0-363974f2406b"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tesla T4'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["train_chunk_df = pd.read_csv(\"/content/train.csv\", iterator=True, chunksize=10**6)\n","valid_df = pd.read_csv(\"/content/valid.csv\")\n","test_df = pd.read_csv(\"/content/test.csv\")"],"metadata":{"id":"Q5Z4eXJ_gtwa","executionInfo":{"status":"ok","timestamp":1699869341779,"user_tz":-180,"elapsed":33919,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["data = pd.DataFrame()\n","sampling_strategy = \"not minority\"\n","for i, chunk in enumerate(train_chunk_df):\n","  chunk = chunk.sample(frac=.1, replace=False, random_state=42)\n","  y = chunk.loc[:, \"label\"]\n","  X = chunk.drop(columns=[\"label\"])\n","  nm = TomekLinks(sampling_strategy=sampling_strategy)\n","  X, y = nm.fit_resample(X, y)\n","  chunk = pd.concat([X, y], axis=1)\n","  data = pd.concat([data, chunk])"],"metadata":{"id":"pyY27oF4kchz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["d"],"metadata":{"id":"ckKkJx5HHSo9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_y = data.loc[:, \"label\"]\n","train_x = data.drop(columns=[\"label\"])\n","\n","valid_y = valid_df.loc[:, \"label\"]\n","valid_x = valid_df.drop(columns=[\"label\"])\n","\n","scaler_train = MinMaxScaler(feature_range=(0, 1))\n","scaler_valid = MinMaxScaler(feature_range=(0, 1))\n","train_x = scaler_train.fit_transform(train_x)\n","valid_x = scaler_valid.fit_transform(valid_x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"HzzprTDVx6kF","executionInfo":{"status":"error","timestamp":1699865499644,"user_tz":-180,"elapsed":4893,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}},"outputId":"3a09061f-0613-4813-9744-4f453e4cfc88"},"execution_count":18,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-820edc7b4121>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mvalid_x\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler_valid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mtrain_x\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'describe'"]}]},{"cell_type":"code","source":["valid_df.groupby(\"label\").size().plot(kind=\"pie\", y=\"count\", label=\"valid\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"aihfWV_uzbgz","executionInfo":{"status":"ok","timestamp":1699865473623,"user_tz":-180,"elapsed":13,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}},"outputId":"0b41506d-b818-4267-8b6e-6d6496f460a2"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='valid'>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def objective(trial: optuna.Trial) -> float:\n","\n","    param = {\n","        \"target_border\" : 0.5,\n","        # \"task_type\" : \"GPU\",\n","        # \"devices\" : \"0:1\",\n","        \"depth\": trial.suggest_int(\"depth\", 8, 12),\n","        \"iterations\" : 100,\n","        \"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Ordered\", \"Plain\"]),\n","        \"bootstrap_type\": trial.suggest_categorical(\n","            \"bootstrap_type\", [\"Bayesian\", \"Bernoulli\", \"MVS\"]\n","        ),\n","        \"learning_rate\" : trial.suggest_categorical(\"learning_rate\", [0.003, 0.002]),\n","        \"eval_metric\": \"F1\"\n","    }\n","\n","    if param[\"bootstrap_type\"] == \"Bayesian\":\n","        param[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 1, 10)\n","    elif param[\"bootstrap_type\"] == \"Bernoulli\":\n","        param[\"subsample\"] = trial.suggest_float(\"subsample\", 0.1, 1, log=True)\n","\n","    gbm = CatBoostClassifier(**param)\n","\n","    pruning_callback = CatBoostPruningCallback(trial, \"F1\")\n","    gbm.fit(\n","        train_x,\n","        train_y,\n","        eval_set=[(valid_x, valid_y)],\n","        verbose=2,\n","        callbacks=[pruning_callback]\n","    )\n","\n","    # evoke pruning manually.\n","    pruning_callback.check_pruned()\n","\n","    preds = gbm.predict(valid_x)\n","    pred_labels = np.rint(preds)\n","    accuracy = accuracy_score(valid_y, pred_labels)\n","    f1 = f1_score(valid_y, pred_labels)\n","\n","    return f1"],"metadata":{"id":"ySDVD9e8Up46","executionInfo":{"status":"ok","timestamp":1699865526209,"user_tz":-180,"elapsed":343,"user":{"displayName":"Данис Динмухаметов","userId":"11478569142277271789"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["study = optuna.create_study(\n","        pruner=optuna.pruners.ThresholdPruner(n_warmup_steps=6, lower=0.38), direction=\"maximize\"\n","    )\n","study.optimize(objective, n_trials=30)\n","\n","print(\"Number of finished trials: {}\".format(len(study.trials)))\n","\n","print(\"Best trial:\")\n","trial = study.best_trial\n","\n","print(\"  Value: {}\".format(trial.value))\n","\n","print(\"  Params: \")\n","for key, value in trial.params.items():\n","    print(\"    {}: {}\".format(key, value))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"btYQEYQ-X3Sq","outputId":"0266b168-8b7e-42f9-e953-1f234d035799"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[I 2023-11-13 09:55:43,975] A new study created in memory with name: no-name-e2f81030-da90-445f-a1e6-0060158d00cf\n","<ipython-input-19-e9f02937d8c4>:24: ExperimentalWarning: CatBoostPruningCallback is experimental (supported from v3.0.0). The interface can change in the future.\n","  pruning_callback = CatBoostPruningCallback(trial, \"F1\")\n"]},{"output_type":"stream","name":"stdout","text":["0:\tlearn: 0.6227742\ttest: 0.3711401\tbest: 0.3711401 (0)\ttotal: 339ms\tremaining: 33.5s\n","2:\tlearn: 0.6307580\ttest: 0.3746325\tbest: 0.3746325 (2)\ttotal: 1.01s\tremaining: 32.8s\n","4:\tlearn: 0.6182950\ttest: 0.3573423\tbest: 0.3746325 (2)\ttotal: 1.73s\tremaining: 32.9s\n"]},{"output_type":"stream","name":"stderr","text":["[I 2023-11-13 09:55:51,472] Trial 0 pruned. Trial was pruned at iteration 6.\n"]},{"output_type":"stream","name":"stdout","text":["6:\tlearn: 0.6201728\ttest: 0.3619041\tbest: 0.3746325 (2)\ttotal: 2.37s\tremaining: 31.4s\n","\n","bestTest = 0.3746325033\n","bestIteration = 2\n","\n","Shrink model to first 3 iterations.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"wl1b0ulD2irU"},"execution_count":null,"outputs":[]}]}